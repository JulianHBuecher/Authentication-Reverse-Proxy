# Configuration for NGINX with Subrequest Authentication

upstream website {
    server website:80;
}

upstream identityserver {
    server identityserver:80;
}

server {
    listen 80;
    listen 443 ssl http2;

    resolver local=on ipv6=off;

    server_name reverse.proxy.localhost;

    include common.conf;
    include /etc/nginx/ssl.conf;

    proxy_buffer_size          128k;
    proxy_buffers              4 256k;
    proxy_busy_buffers_size    256k;

    location / {
        proxy_pass http://website/;
        include common_location.conf;
    }

    location /secure {
        # Configuration values used from
        # https://github.com/zmartzone/lua-resty-openidc
        access_by_lua_block {
            local opts = {
                -- callback URI have to be covered within the protected ressource
                redirect_uri_path = "/secure/callback",
                
                -- Discovery endpoint of the IdP
                discovery = "https://reverse.proxy.localhost/identityserver/.well-known/openid-configuration",

                -- if IdP signs token with not known algorithm (deny that)
                accept_none_alg = false,
                accept_unsupported_alg = false,

                -- client credentials
                client_id = "openresty-proxy",
                client_secret = "438c3e42-5f87-4fad-83a5-a30130943521",
                scope = "openid profile scope1",
                -- Refresh the users id_token after 900 seconds without requiring re-authentication
                refresh_session_interval = 900,
                iat_slack = 600,

                -- Renew the access token automatically
                renew_access_token_on_expiry = true,

                -- ... and revoke the token on logout
                revoke_tokens_on_logout = true,

                -- do not verify the self-signed certificate
                ssl_verify = "no",

                -- setting https as redirect scheme
                redirect_uri_scheme = "https",

                -- setting the logout path and its redirect counterpart
                logout_path = "/logout",
                redirect_after_logout_uri = "/",
                redirect_after_logout_with_id_token_hint = false,
                session_contents = {id_token=true},

                -- Connection keepalive with the OP can be enabled ("yes") or disabled ("no").
                keepalive = "no",

                use_pkce = true,
                -- when set to true the "Proof Key for Code Exchange" as
                -- defined in RFC 7636 will be used. The code challenge
                -- method will alwas be S256
            }

            -- call authenticate for OpenID Connect user authentication
            local res, err = require("resty.openidc").authenticate(opts)

            local session_opts = { cookie = { domain = "reverse.proxy.localhost" } }

            if err then
                ngx.status = 500
                ngx.say(err)
                ngx.exit(ngx.HTTP_INTERNAL_SERVER_ERROR)
            end
        }

        rewrite ^(/secure.*)$ $1.html break;
        proxy_pass http://website/;
        include common_location.conf;
    }

    location /assets {
        rewrite ^(/assets.*)$ $1 break;
        proxy_pass http://website/;
        include common_location.conf;
    }

    location /identityserver {
        rewrite ^/identityserver(.*)$ $1 break;
        proxy_pass http://identityserver;
        include common_location.conf;
    }
}