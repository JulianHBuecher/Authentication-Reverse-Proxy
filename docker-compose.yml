version: "3.8"
services:
  reverse-proxy:
    container_name: reverse-proxy
    build:
      context: ./Nginx_Reverse_Proxy
      dockerfile: Dockerfile.OAuth2
    image: secure-reverse-proxy:dev
    ports:
      - "80:80"
      - "443:443"
    networks:
      testnetwork:
        aliases:
          - "reverse.proxy.localhost"
    deploy:
      restart_policy:
        condition: on-failure
  
  website-server:
    container_name: website
    build: ./Website/.
    image: secured-website:dev
    ports:
      - 80
    networks:
      - testnetwork
    deploy:
      restart_policy:
        condition: on-failure

  backend:
    container_name: backend
    build: ./ProtectedAPI/Backend/.
    image: secured-backend:dev
    ports:
      - 80
    networks:
      - testnetwork
    deploy:
      restart_policy:
        condition: on-failure
    
  identityserver:
    container_name: identityserver
    build: ./ProtectedAPI/IdentityServer/.
    image: identityserver:dev
    ports:
      - 80
    networks:
      - testnetwork
    deploy:
      restart_policy:
        condition: on-failure
  
  # Support for IdentityServer4 and PKCE is coming
  # https://github.com/vouch/vouch-proxy/pull/307
  # vouch:
  #   container_name: vouch
  #   image: voucher/vouch-proxy:latest
  #   ports:
  #     - "9090:9090"
  #   environment:
  #     # - VOUCH_PORT=80
  #     - VOUCH_DOMAINS=proxy.localhost
  #     # - VOUCH_TESTING=true
  #     # - VOUCH_ALLOWALLUSERS=true
  #     # - VOUCH_COOKIE_DOMAIN=proxy.localhost
  #     - VOUCH_LOGLEVEL=debug
  #     - OAUTH_PROVIDER=oidc
  #     - OAUTH_CLIENT_ID=vouch-proxy
  #     - OAUTH_CLIENT_SECRET=b1612bd0-9bbf-4157-99e3-0e1a65bdad92
  #     - OAUTH_AUTH_URL=https://reverse.proxy.localhost/identityserver/connect/authorize
  #     - OAUTH_TOKEN_URL=https://reverse.proxy.localhost/identityserver/connect/token
  #     - OAUTH_USER_INFO_URL=https://reverse.proxy.localhost/identityserver/connect/userinfo
  #     - OAUTH_END_SESSION_ENDPOINT=https://reverse.proxy.localhost/identityserver/connect/endsession
  #     - OAUTH_SCOPES=openid,profile,scope1
  #     - OAUTH_CALLBACK_URLS=https://vouch.proxy.localhost/auth
  #   networks:
  #     testnetwork:
  #       aliases:
  #         - "vouch.proxy.localhost"
  #   deploy:
  #     restart_policy:
  #       condition: on-failure

  # openresty-nginx:
  #   container_name: openresty-nginx
  #   build:
  #     context: ./OpenResty_Reverse_Proxy
  #     dockerfile: Dockerfile
  #   image: openresty-proxy:dev
  #   ports:
  #     - "80:80"
  #     - "443:443"
  #   networks:
  #     testnetwork:
  #       aliases:
  #         - "reverse.proxy.localhost"
  #   deploy:
  #     restart_policy:
  #       condition: on-failure
  
  oauth2-proxy:
    container_name: oauth2-proxy
    image: quay.io/oauth2-proxy/oauth2-proxy:latest
    ports:
      - 4180
    environment:
      - OAUTH2_PROXY_PROVIDER=oidc
      - OAUTH2_PROXY_PROVIDER_DISPLAY_NAME="IdentityServer 4"
      - OAUTH2_PROXY_COOKIE_DOMAINS=reverse.proxy.localhost
      # Possiblity to confirm email addresses via the domain
      - OAUTH2_PROXY_EMAIL_DOMAINS=*
      - OAUTH2_PROXY_COOKIE_SECURE=true
      - OAUTH2_PROXY_COOKIE_SECRET=Jhy3uQq1td7KngPMJsPqow==
      - OAUTH2_PROXY_REDIRECT_URL=https://reverse.proxy.localhost/oauth2/callback
      - OAUTH2_PROXY_OIDC_ISSUER_URL=https://reverse.proxy.localhost/identityserver
      - OAUTH2_PROXY_CLIENT_ID=oauth2-proxy
      - OAUTH2_PROXY_CLIENT_SECRET=0edc6d7b-633c-42d6-9b60-fbb2f10c49dc
      # Logging Standards could be disabled (only needed for testing)
      - OAUTH2_PROXY_STANDARD_LOGGING=true
      - OAUTH2_PROXY_AUTH_LOGGING=true
      - OAUTH2_PROXY_REQUEST_LOGGING=true
      - OAUTH2_PROXY_REVERSE_PROXY=true
      # Because of self-signed certificate
      - OAUTH2_PROXY_SSL_INSECURE_SKIP_VERIFY=true
      # Have to be set, to enable the COOKIE_DOMAIN
      - OAUTH2_PROXY_WHITELIST_DOMAINS=reverse.proxy.localhost
      # Elsewise OAuth2-Proxy listens on 127.0.0.1:4180
      - OAUTH2_PROXY_HTTP_ADDRESS=http://:4180
      # Requested Scopes from IdP
      - OAUTH2_PROXY_SCOPE=openid profile scope1
      # Value f√ºr user id in the id_token (others could be used)
      - OAUTH2_PROXY_USER_ID_CLAIM=given_name
    networks:
      - testnetwork
    deploy:
      restart_policy:
        condition: on-failure

networks:
  testnetwork:
    driver: bridge