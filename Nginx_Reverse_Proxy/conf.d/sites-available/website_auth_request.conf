# Configuration for NGINX with Subrequest Authentication

upstream website {
    server website:80;
}

upstream vouch {
    server vouch:9090;
}

upstream identityserver {
    server identityserver:80;
}

server {
    listen 80;
    listen 443 ssl http2;

    server_name reverse.proxy.localhost;

    include common.conf;
    include /etc/nginx/ssl.conf;

    proxy_buffer_size          128k;
    proxy_buffers              4 256k;
    proxy_busy_buffers_size    256k;

    location / {
        proxy_pass http://website/;
        include common_location.conf;
        
        # passing the original host header
        # proxy_set_header Host $http_host;
    }

    # This location serves all of the paths vouch uses
    location ~ ^/(auth|login|logout|static) {
        proxy_pass http://vouch;
        proxy_set_header Host $http_host;
    }

    location /secure {
        # send all requests to the '/validate' endpoint for authorization
        auth_request /validate;

        rewrite ^(/secure.*)$ $1.html break;
        proxy_pass http://website/;
        include common_location.conf;

        # you may need to set these variables in this block as per https://github.com/vouch/vouch-proxy/issues/26#issuecomment-425215810
        auth_request_set $auth_resp_x_vouch_user $upstream_http_x_vouch_user;
        auth_request_set $auth_resp_x_vouch_idp_claims_groups $upstream_http_x_vouch_idp_claims_groups;
        auth_request_set $auth_resp_x_vouch_idp_claims_given_name $upstream_http_x_vouch_idp_claims_given_name;
    
        # set user header (usually an email)
        proxy_set_header X-Vouch-User $auth_resp_x_vouch_user;

        # passing the original host header
        # proxy_set_header Host $http_host;
    }

    location /assets {
        rewrite ^(/assets.*)$ $1 break;
        proxy_pass http://website/;
        include common_location.conf;
    }

    location /validate {
        # Endpoint could only be reached from inside the network
        internal;
        # forward the /validate request to Vouch Proxy
        proxy_pass http://vouch/validate;
        # passing the original host header
        proxy_set_header Host $http_host;

        # for CORS preflight requests, just return 200 since a preflight request does not contain a cookie
        # https://stackoverflow.com/questions/41760128/cookies-not-sent-on-options-requests
        if ($request_method = 'OPTIONS') {
            return 200;
        }

        # Caching the results of the Vouch Proxy Authentication
        # proxy_cache_valid 200 30s;
        # proxy_cache auth_cache;
        # proxy_cache_methods GET;
        # proxy_cache_key $cookie_vouchcookie;

        # Vouch Proxy only acts on the request headers
        proxy_pass_request_body off;
        proxy_set_header Content-Length "";

        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;

        # values used by the @error401 call
        auth_request_set $auth_resp_jwt $upstream_http_x_vouch_jwt;
        auth_request_set $auth_resp_err $upstream_http_x_vouch_err;
        auth_request_set $auth_resp_failcount $upstream_http_x_vouch_failcount;
    }

    location /identityserver {
        rewrite ^/identityserver(.*)$ $1 break;
        proxy_pass http://identityserver;
        include common_location.conf;
    }

    # if validate returns '401 not authorized' then forward the request to the error401block
    error_page 401 = @error401;

    location @error401 {
        # redirect to Vouch Proxy for Login
        return 302 https://vouch.proxy.localhost/login?url=$scheme://$http_host$request_uri&vouch-failcount=$auth_resp_failcount&X-Vouch-Token=$auth_resp_jwt&error=$auth_resp_err;
    }
}

server {
    listen 443 ssl http2;
    server_name vouch.proxy.localhost;
    
    # include common.conf;
    include /etc/nginx/vouch-ssl.conf;

    location / {
        proxy_set_header Host $http_host;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_pass http://vouch; 
    }
}