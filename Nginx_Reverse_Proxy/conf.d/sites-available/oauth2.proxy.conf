# Configuration for NGINX with Subrequest Authentication

upstream website {
    server website:80;
}

upstream identityserver {
    server identityserver:80;
}

upstream oauth2-proxy {
    server oauth2-proxy:4180;
}

server {
    listen 80;
    listen 443 ssl http2;

    # resolver local=on ipv6=off;

    server_name reverse.proxy.localhost;

    include common.conf;
    include /etc/nginx/ssl.conf;

    proxy_buffer_size          128k;
    proxy_buffers              4 256k;
    proxy_busy_buffers_size    256k;


    location / {
        proxy_pass http://website/;
        include common_location.conf;
    }

    location /oauth2/ {
        proxy_pass http://oauth2-proxy;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Auth-Request-Redirect $request_uri;
        include common_location.conf;
    }

    location = /oauth2/auth {
        proxy_pass http://oauth2-proxy;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Auth-Request-Redirect $request_uri;
        proxy_set_header Content-Length "";
        proxy_pass_request_body off;
        include common_location.conf;
    }

    location /secure {
        rewrite ^(/secure.*)$ $1.html break;

        auth_request /oauth2/auth;
        error_page 401 = /oauth2/sign_in;

        # pass information via X-User and X-Email headers to backend,
        # requires running with --set-xauthrequest flag
        auth_request_set $user   $upstream_http_x_auth_request_user;
        auth_request_set $email  $upstream_http_x_auth_request_email;
        proxy_set_header X-User  $user;
        proxy_set_header X-Email $email;

        proxy_pass http://website/;
        include common_location.conf;
    }

    location /assets {
        rewrite ^(/assets.*)$ $1 break;
        proxy_pass http://website/;
        include common_location.conf;
    }

    location /identityserver {
        rewrite ^/identityserver(.*)$ $1 break;
        proxy_pass http://identityserver;
        include common_location.conf;
    }
}